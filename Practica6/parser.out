Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> A
Rule 2     S -> empty
Rule 3     A -> a c A
Rule 4     A -> c a A
Rule 5     A -> a c A b B
Rule 6     A -> c a A b B
Rule 7     A -> C
Rule 8     A -> empty
Rule 9     B -> b B
Rule 10    B -> empty
Rule 11    C -> a c A b B a
Rule 12    C -> c a A b B a
Rule 13    C -> empty
Rule 14    empty -> <empty>

Terminals, with rules where they appear

a                    : 3 4 5 6 11 11 12 12
b                    : 5 6 9 11 12
c                    : 3 4 5 6 11 12
error                : 

Nonterminals, with rules where they appear

A                    : 1 3 4 5 6 11 12
B                    : 5 6 9 11 12
C                    : 7
S                    : 0
empty                : 2 8 10 13

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . A
    (2) S -> . empty
    (3) A -> . a c A
    (4) A -> . c a A
    (5) A -> . a c A b B
    (6) A -> . c a A b B
    (7) A -> . C
    (8) A -> . empty
    (14) empty -> .
    (11) C -> . a c A b B a
    (12) C -> . c a A b B a
    (13) C -> . empty

    a               shift and go to state 4
    c               shift and go to state 5
    $end            reduce using rule 14 (empty -> .)

    S                              shift and go to state 1
    A                              shift and go to state 2
    empty                          shift and go to state 3
    C                              shift and go to state 6

state 1

    (0) S' -> S .



state 2

    (1) S -> A .

    $end            reduce using rule 1 (S -> A .)


state 3

    (2) S -> empty .
    (8) A -> empty .
    (13) C -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (S -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 2 (S -> empty .)
    $end            reduce using rule 2 (S -> empty .)

  ! $end            [ reduce using rule 8 (A -> empty .) ]
  ! $end            [ reduce using rule 13 (C -> empty .) ]


state 4

    (3) A -> a . c A
    (5) A -> a . c A b B
    (11) C -> a . c A b B a

    c               shift and go to state 7


state 5

    (4) A -> c . a A
    (6) A -> c . a A b B
    (12) C -> c . a A b B a

    a               shift and go to state 8


state 6

    (7) A -> C .

    $end            reduce using rule 7 (A -> C .)
    b               reduce using rule 7 (A -> C .)


state 7

    (3) A -> a c . A
    (5) A -> a c . A b B
    (11) C -> a c . A b B a
    (3) A -> . a c A
    (4) A -> . c a A
    (5) A -> . a c A b B
    (6) A -> . c a A b B
    (7) A -> . C
    (8) A -> . empty
    (11) C -> . a c A b B a
    (12) C -> . c a A b B a
    (13) C -> . empty
    (14) empty -> .

    a               shift and go to state 4
    c               shift and go to state 5
    b               reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)

    A                              shift and go to state 9
    C                              shift and go to state 6
    empty                          shift and go to state 10

state 8

    (4) A -> c a . A
    (6) A -> c a . A b B
    (12) C -> c a . A b B a
    (3) A -> . a c A
    (4) A -> . c a A
    (5) A -> . a c A b B
    (6) A -> . c a A b B
    (7) A -> . C
    (8) A -> . empty
    (11) C -> . a c A b B a
    (12) C -> . c a A b B a
    (13) C -> . empty
    (14) empty -> .

    a               shift and go to state 4
    c               shift and go to state 5
    b               reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)

    A                              shift and go to state 11
    C                              shift and go to state 6
    empty                          shift and go to state 10

state 9

    (3) A -> a c A .
    (5) A -> a c A . b B
    (11) C -> a c A . b B a

  ! shift/reduce conflict for b resolved as shift
    $end            reduce using rule 3 (A -> a c A .)
    b               shift and go to state 12

  ! b               [ reduce using rule 3 (A -> a c A .) ]


state 10

    (8) A -> empty .
    (13) C -> empty .

  ! reduce/reduce conflict for b resolved using rule 8 (A -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 8 (A -> empty .)
    b               reduce using rule 8 (A -> empty .)
    $end            reduce using rule 8 (A -> empty .)

  ! b               [ reduce using rule 13 (C -> empty .) ]
  ! $end            [ reduce using rule 13 (C -> empty .) ]


state 11

    (4) A -> c a A .
    (6) A -> c a A . b B
    (12) C -> c a A . b B a

  ! shift/reduce conflict for b resolved as shift
    $end            reduce using rule 4 (A -> c a A .)
    b               shift and go to state 13

  ! b               [ reduce using rule 4 (A -> c a A .) ]


state 12

    (5) A -> a c A b . B
    (11) C -> a c A b . B a
    (9) B -> . b B
    (10) B -> . empty
    (14) empty -> .

  ! shift/reduce conflict for b resolved as shift
    b               shift and go to state 14
    a               reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)

  ! b               [ reduce using rule 14 (empty -> .) ]

    B                              shift and go to state 15
    empty                          shift and go to state 16

state 13

    (6) A -> c a A b . B
    (12) C -> c a A b . B a
    (9) B -> . b B
    (10) B -> . empty
    (14) empty -> .

  ! shift/reduce conflict for b resolved as shift
    b               shift and go to state 14
    a               reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)

  ! b               [ reduce using rule 14 (empty -> .) ]

    B                              shift and go to state 17
    empty                          shift and go to state 16

state 14

    (9) B -> b . B
    (9) B -> . b B
    (10) B -> . empty
    (14) empty -> .

  ! shift/reduce conflict for b resolved as shift
    b               shift and go to state 14
    a               reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)

  ! b               [ reduce using rule 14 (empty -> .) ]

    B                              shift and go to state 18
    empty                          shift and go to state 16

state 15

    (5) A -> a c A b B .
    (11) C -> a c A b B . a

    $end            reduce using rule 5 (A -> a c A b B .)
    b               reduce using rule 5 (A -> a c A b B .)
    a               shift and go to state 19


state 16

    (10) B -> empty .

    a               reduce using rule 10 (B -> empty .)
    $end            reduce using rule 10 (B -> empty .)
    b               reduce using rule 10 (B -> empty .)


state 17

    (6) A -> c a A b B .
    (12) C -> c a A b B . a

    $end            reduce using rule 6 (A -> c a A b B .)
    b               reduce using rule 6 (A -> c a A b B .)
    a               shift and go to state 20


state 18

    (9) B -> b B .

    a               reduce using rule 9 (B -> b B .)
    $end            reduce using rule 9 (B -> b B .)
    b               reduce using rule 9 (B -> b B .)


state 19

    (11) C -> a c A b B a .

    $end            reduce using rule 11 (C -> a c A b B a .)
    b               reduce using rule 11 (C -> a c A b B a .)


state 20

    (12) C -> c a A b B a .

    $end            reduce using rule 12 (C -> c a A b B a .)
    b               reduce using rule 12 (C -> c a A b B a .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for b in state 9 resolved as shift
WARNING: shift/reduce conflict for b in state 11 resolved as shift
WARNING: shift/reduce conflict for b in state 12 resolved as shift
WARNING: shift/reduce conflict for b in state 13 resolved as shift
WARNING: shift/reduce conflict for b in state 14 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (S -> empty)
WARNING: rejected rule (A -> empty) in state 3
WARNING: reduce/reduce conflict in state 3 resolved using rule (S -> empty)
WARNING: rejected rule (C -> empty) in state 3
WARNING: reduce/reduce conflict in state 10 resolved using rule (A -> empty)
WARNING: rejected rule (C -> empty) in state 10
WARNING: Rule (C -> empty) is never reduced
